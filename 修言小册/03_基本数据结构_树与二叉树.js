/**理解树结构
 * 树的层次计算规则：根结点所在的那一层记为第一层，其子结点所在的就是第二层，以此类推。
 * 结点和树的“高度”计算规则：叶子结点高度记为1，每向上一层高度就加1，逐层向上累加至目标结点时，所得到的的值就是目标结点的高度。树中结点的最大高度，称为“树的高度”。
 * “度”的概念：一个结点开叉出去多少个子树，被记为结点的“度”。比如我们上图中，根结点的“度”就是3。
 * “叶子结点”：叶子结点就是度为0的结点。在上图中，最后一层的结点的度全部为0，所以这一层的结点都是叶子结点。
 */

/**二叉树
 * 它可以没有根结点，作为一棵空树存在
如果它不是空树，那么必须由根结点、左子树和右子树组成，且左右子树都是二叉树。如下图：
 * 注意，二叉树不能被简单定义为每个结点的度都是2的树。普通的树并不会区分左子树和右子树，但在二叉树中，左右子树的位置是严格约定、不能交换的。对应到图上来看，也就意味着 B 和 C、D 和 E、F 和 G 是不能互换的。
 */

// 二叉树的实现
function TreeNode(val) {
  this.val = val;
  this.left = this.right = null;
}
const node = new TreeNode(1);
node.left = new TreeNode(2);
node.right = new TreeNode(3);

console.log(node)